// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "interactiveTransactions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  waiting
  confirmed
  canceled
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  full_name     String
  password      String
  phone_number  String?
  active        Boolean @default(true)
  created_at    DateTime? @default(now())
  update_at     DateTime? @updatedAt
  CreatedLesson Lesson[]
  GroupTeacher  GroupTeacher[]

  @@map("users")
}

model Student {
  id           Int              @id @default(autoincrement())
  first_name   String
  last_name    String
  phone_number String
  status       Status           @default(waiting)
  birthday     DateTime
  region_id    Int?
  gender_id    Int?
  created_at   DateTime?        @default(now())
  updated_at   DateTime?        @updatedAt
  course       StudentCourses[]
  GroupStudent GroupStudent[]
  Attendences  Attendence[]
  Region       Region?          @relation(fields: [region_id], references: [id], onDelete: SetNull)
  Gender       Gender?          @relation(fields: [gender_id], references: [id], onDelete: SetNull)
  StudentMoney StudentMoney?
  StudentDebit StudentDebit[]

  @@fulltext([first_name, last_name])
  @@map("students")
}

model StudentCourses {
  id         Int       @default(autoincrement())
  student_id Int
  course_id  Int
  active     Boolean   @default(true)
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt
  Student    Student   @relation(fields: [student_id], references: [id])
  Course     Course    @relation(fields: [course_id], references: [id])

  @@id([id, student_id, course_id])
  @@map("student_courses")
}

model Course {
  id         Int              @id @default(autoincrement())
  title      String
  active     Boolean          @default(true)
  created_at DateTime?        @default(now())
  update_at  DateTime?        @updatedAt
  students   StudentCourses[]

  Group Group[]
  @@map("courses")
}

model Time {
  id         Int       @id @default(autoincrement())
  week       String
  start_time String
  end_time   String
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt
  active     Boolean   @default(true)


  GroupLessonTime GroupLessonTime[]
  Attendence      Attendence[]
  @@map("times")
}

model Region {
  id         Int       @id @default(autoincrement())
  title      String
  active     Boolean   @default(true)
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt
  Student    Student[]

  @@map("regions")
}

model Gender {
  id         Int       @id @default(autoincrement())
  title      String
  active     Boolean   @default(true)
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt
  Student    Student[]

  @@map("genders")
}

model Group {
  id              Int               @id @default(autoincrement())
  title           String
  course_id       Int
  active          Boolean           @default(true)
  created_at      DateTime?         @default(now())
  update_at       DateTime?         @updatedAt
  Course          Course            @relation(fields: [course_id], references: [id], onDelete: Cascade)
  GroupLessonTime GroupLessonTime[]
  GroupStudent    GroupStudent[]
  Lesson          Lesson[]
  Attendence      Attendence[]
  GroupPrice      GroupPrice[]
  StudentDebit    StudentDebit[]
  GroupTeacher    GroupTeacher[]

  @@map("groups")
}

model GroupPrice {
  id            Int       @unique @default(autoincrement())
  group_id      Int
  monthly_price Float
  daily_price   Float
  active        Boolean   @default(true)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt

  Group Group @relation(fields: [group_id], references: [id])
  @@id([id, group_id])
  @@map("group_prices")
}

model GroupLessonTime {
  id         Int       @default(autoincrement())
  group_id   Int
  time_id    Int
  active     Boolean   @default(true)
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt

  Time  Time  @relation(fields: [time_id], references: [id])
  Group Group @relation(fields: [group_id], references: [id])

  @@id([id, group_id, time_id])
  @@map("group_lesson_times")
}

model GroupStudent {
  id         Int       @default(autoincrement())
  group_id   Int
  student_id Int
  bonus      Float     @default(0)
  active     Boolean   @default(true)
  start_date DateTime  @default(now())
  end_date   DateTime?
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt

  Student Student @relation(fields: [student_id], references: [id])
  Group   Group   @relation(fields: [group_id], references: [id])
  @@id([id, group_id, student_id])
  @@map("group_students")
}

model Lesson {
  id        Int      @unique @default(autoincrement())
  group_id  Int
  user_id   Int
  date_time DateTime
  active    Boolean  @default(true)
  month     Int
  year      Int

  Attendence Attendence[]
  Group      Group        @relation(fields: [group_id], references: [id])
  User       User?        @relation(fields: [user_id], references: [id])
  StudentDebit StudentDebit[]

  @@id([id, group_id, user_id])
  @@map("lessons")
}

model Attendence {
  id         Int     @default(autoincrement())
  group_id   Int
  lesson_id  Int
  time_id    Int
  student_id Int
  active     Boolean @default(true)
  attended   Boolean @default(true)
  cash       Boolean @default(true)

  Group   Group   @relation(fields: [group_id], references: [id])
  Student Student @relation(fields: [student_id], references: [id])
  Lesson  Lesson  @relation(fields: [lesson_id], references: [id])
  Time    Time    @relation(fields: [time_id], references: [id])
  @@id([id, group_id, lesson_id, time_id, student_id])
  @@map("attendences")
}

model StudentMoney {
  id         Int      @default(autoincrement())
  student_id Int    @unique
  value      Float    @default(0)
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Student Student @relation(fields: [student_id], references: [id])
  @@id([id, student_id])
  @@map("student_money")
}

model StudentDebit {
  id Int @default(autoincrement())
  student_id Int
  group_id Int
  value Float
  lesson_id Int?
  month Int?
  active  Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Group   Group   @relation(fields: [group_id], references: [id])
  Student Student @relation(fields: [student_id], references: [id])
  Lesson  Lesson?  @relation(fields: [lesson_id], references: [id])
  @@id([id, student_id, group_id])
  @@map("student_debits")
}

model GroupTeacher {
  id Int @default(autoincrement())
  user_id Int
  group_id Int
  active Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User User @relation(fields: [user_id], references: [id])
  Group Group @relation(fields: [group_id], references: [id])
  @@id([id, user_id, group_id])
  @@map("group_teachers")
}
